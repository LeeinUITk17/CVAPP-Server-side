// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  email       String       @unique
  age         Int?
  password    String       @db.VarChar(255)
  phone       String?      @db.VarChar(15)
  address     String?      @db.VarChar(255)
  linkedin    String?      @db.VarChar(255)
  github      String?      @db.VarChar(255)
  summary     String?      @db.Text
  avatar      String?      @db.VarChar(255)
  experiences Experience[]
  educations  Education[]
  skills      Skill[]
  cv          CV?          
  createdAt   DateTime     @default(now())
  comments    Comment[]
  likes       CVLike[]     

  MessageReaction MessageReaction[]

  Notification Notification[]

  PinnedMessage PinnedMessage[]

  RoomUser RoomUser[]

  Chat Chat[] @relation("UserMessages")
}

model CV {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]    
  likes       CVLike[]    
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt      

  @@index([userId]) 
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  createdAt DateTime @default(now())
  userId    Int
  cvId      Int      
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cv        CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId]) 
}

model CVLike {
  id     Int    @id @default(autoincrement())
  userId Int    
  cvId   Int    
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cv     CV     @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@unique([userId, cvId]) 
}


model Experience {
  id          Int      @id @default(autoincrement())
  company     String   @db.VarChar(255)
  position    String   @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime?
  description String?  @db.Text
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) 
}

model Education {
  id        Int      @id @default(autoincrement())
  school    String   @db.VarChar(255)
  degree    String   @db.VarChar(255)
  field     String   @db.VarChar(255)
  startDate DateTime
  endDate   DateTime?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) 
}

model Skill {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  level    String?  @db.VarChar(50)
  userId   Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) 
}
model Chat {
  id        Int       @id @default(autoincrement())
  roomId    Int
  senderId  Int
  message  String  // Changed to plural to indicate multiple messages
  createdAt DateTime   @default(now())
  room      Room       @relation(fields: [roomId], references: [id])
  sender    User       @relation("UserMessages", fields: [senderId], references: [id])
  attachments     Attachment[]     // Relation to Attachment
  reactions       MessageReaction[] // Relation to MessageReaction
  pinnedMessages  PinnedMessage[]  //Relation to PinnedMessage
}

model Room {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  chats          Chat[]
  users          RoomUser[]
  pinnedMessages PinnedMessage[] // Relation to PinnedMessage
}

model RoomUser {
  id      Int    @id @default(autoincrement())
  roomId  Int
  userId  Int
  room    Room   @relation(fields: [roomId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  @@unique([roomId, userId])  // Ensuring each user is uniquely associated with a room
}

model Attachment {
  id            Int      @id @default(autoincrement())
  chatId     Int
  fileType      String
  filePath      String
  fileSize      Int?
  thumbnailPath String?
  chat       Chat   @relation(fields: [chatId], references: [id])
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  SAD
  ANGRY
}

model MessageReaction {
  id           Int        @id @default(autoincrement())
  chatId    Int
  userId       Int
  reactionType ReactionType
  createdAt    DateTime    @default(now())
  chat         Chat     @relation(fields: [chatId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Notification {
  id              Int      @id @default(autoincrement())
  userId          Int
  message         String
  seen            Boolean  @default(false)
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}

model PinnedMessage {
  id              Int      @id @default(autoincrement())
  chatId       Int
  userId          Int
  pinnedAt        DateTime @default(now())
  roomId          Int     // Room ID is nullable, which allows for a pinned message not necessarily tied to a room
  chat         Chat  @relation(fields: [chatId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  room            Room?    @relation(fields: [roomId], references: [id])
}
